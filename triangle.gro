include gro

ahl := signal(5, 0.1);
bhl := signal(5, 0.1);
chl := signal(5, 0.1);
dhl := signal(5, 0.1);
ehl := signal(5, 0.1);
fhl := signal(5, 0.1);
ghl := signal(5, 0.1);
hhl := signal(5, 0.1);
ihl := signal(5, 0.1);
jhl := signal(5, 0.1);
khl := signal(5, 0.1);
lhl := signal(5, 0.1);
mhl := signal(5, 0.1);
nhl := signal(5, 0.1);
ohl := signal(5, 0.1);
phl := signal(5, 0.1);
qhl := signal(5, 0.1);
rhl := signal(5, 0.1);
shl := signal(5, 0.1);
thl := signal(5, 0.1);
uhl := signal(5, 0.1);
vhl := signal(5, 0.1);
whl := signal(5, 0.1);
xhl := signal(5, 0.1);
yhl := signal(5, 0.1);
zhl := signal(5, 0.1);

k := 10; // reporter scaling factor

MAX_SIG := 0.0125;

L := 0.5;

L2 := 0.375;

set("dt", 0.05);

fun abs2 n . if n < 0 then -n else n end;

fun close x y . 
    if x = 0 | y = 0 then
        1.1
    else
        if x > y then
            (x / y - 1) 
        else
            (y / x - 1) 
        end
    end;

program receiver() := {
    gfp := 0;
    rfp := 0;
    cfp := 0;
    p := [ t := 0 ];

    close (get_signal(ehl)) (get_signal(fhl)) <= 0.5 & get_signal(ehl) >= L2 : {
        cfp := 800;
    }

    close (get_signal(chl)) (get_signal(dhl)) <= 0.5 & get_signal(chl) >= L : {
        gfp := 800;
    }

    close (get_signal(ahl)) (get_signal(bhl)) <= 0.5 & get_signal(ahl) >= L : {
        rfp := 800;
    }

    get_signal(ahl) < L : {
        rfp := 0
    }

    get_signal(bhl) < L : {
        rfp := 0
    }

    get_signal(chl) < L : {
        gfp := 0
    }

    get_signal(dhl) < L : {
        gfp := 0
    }

    get_signal(ehl) < L2 : {
        cfp := 0
    }

    get_signal(fhl) < L2 : {
        cfp := 0
    }

    close (get_signal(chl)) (get_signal(dhl)) > 0.5 : {
        gfp := 0
    }

    close (get_signal(ahl)) (get_signal(bhl)) > 0.5 : {
        rfp := 0
    }

    close (get_signal(ehl)) (get_signal(fhl)) > 0.5 : {
        cfp := 0
    }

    close (get_signal(ehl)) (get_signal(fhl)) > 0.5 & get_signal(ehl) > get_signal(fhl) & p.t > 150 : {
        die();
    }

    close (get_signal(ahl)) (get_signal(bhl)) > 0.5 & get_signal(bhl) > get_signal(ahl) & p.t > 150 : {
        die();
    }

    close (get_signal(chl)) (get_signal(dhl)) > 0.5 & get_signal(dhl) > get_signal(chl) & p.t > 150 : {
        die();
    }

    selected & just_divided : {
        print ( "After division, cell ", id, " has ", get_signal(chl), " chl molecules" );
        print ( "After division, cell ", id, " has ", get_signal(dhl), " dhl molecules" );
    }


    true : { p.t := p.t + dt }
};

program main() := {
    true : {
        set_signal(ahl,-100,0,100);
        set_signal(bhl,200,0,100);
        set_signal(chl,0,-100,100);
        set_signal(dhl,0,200,100);
        set_signal(ehl,-131,-131,100);
        set_signal(fhl,81,81,100);
        set_signal(ghl,81,81,100);
        set_signal(hhl,81,81,100);
        set_signal(ihl,81,81,100);
        set_signal(jhl,81,81,100);
        set_signal(khl,81,81,100);
        set_signal(lhl,81,81,100);
        set_signal(mhl,81,81,100);
        set_signal(nhl,81,81,100);
        set_signal(ohl,81,81,100);
        set_signal(phl,81,81,100);
        set_signal(qhl,81,81,100);
        set_signal(rhl,81,81,100);
        set_signal(shl,81,81,100);
    }
};

ecoli ( [], program receiver() );
