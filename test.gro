//
// This file is generated by groDrawer.py
//

include gro

set("population_max", 2000);

fun close x y . 
    if x = 0 | y = 0 then
        1.1
    else
        if x > y then
            (x / y - 1) 
        else
            (y / x - 1) 
        end
    end;

MAX_DIFF := 0.5;

signal0 := signal(5, 0.1);
signal1 := signal(5, 0.1);
signal2 := signal(5, 0.1);
signal3 := signal(5, 0.1);
signal4 := signal(5, 0.1);
signal5 := signal(5, 0.1);
signal6 := signal(5, 0.1);
signal7 := signal(5, 0.1);

program canvas() := {

    gfp := 0;
    rfp := 0;
    bfp := 0;
    cfp := 0;
    yfp := 0;

    p := [ t := 0 ];

    true : { p.t := p.t + dt }

    get_signal(signal0) >= 0.396 & get_signal(signal1) >= 0.396 & close (get_signal(signal0)) (get_signal(signal1)) <= MAX_DIFF : {
        gfp := 800;
    }

    get_signal(signal2) >= 0.396 & get_signal(signal3) >= 0.396 & close (get_signal(signal2)) (get_signal(signal3)) <= MAX_DIFF : {
        gfp := 800;
    }

    get_signal(signal4) >= 0.396 & get_signal(signal5) >= 0.396 & close (get_signal(signal4)) (get_signal(signal5)) <= MAX_DIFF : {
        gfp := 800;
    }

    get_signal(signal6) >= 0.396 & get_signal(signal7) >= 0.396 & close (get_signal(signal6)) (get_signal(signal7)) <= MAX_DIFF : {
        gfp := 800;
    }

    ( get_signal(signal0) < 0.396 | get_signal(signal1) < 0.396 | close (get_signal(signal0)) (get_signal(signal1)) > MAX_DIFF ) & ( get_signal(signal2) < 0.396 | get_signal(signal3) < 0.396 | close (get_signal(signal2)) (get_signal(signal3)) > MAX_DIFF ) & ( get_signal(signal4) < 0.396 | get_signal(signal5) < 0.396 | close (get_signal(signal4)) (get_signal(signal5)) > MAX_DIFF ) & ( get_signal(signal6) < 0.396 | get_signal(signal7) < 0.396 | close (get_signal(signal6)) (get_signal(signal7)) > MAX_DIFF ) : {
        gfp := 0;
    }

};

program main() := {
    true : {
        set_signal(signal0, -31.066, -31.066, 100);
        set_signal(signal1, 181.066, 181.066, 100);
        set_signal(signal2, 31.066, -31.066, 100);
        set_signal(signal3, -181.066, 181.066, 100);
        set_signal(signal4, 31.066, 31.066, 100);
        set_signal(signal5, -181.066, -181.066, 100);
        set_signal(signal6, -31.066, 31.066, 100);
        set_signal(signal7, 181.066, -181.066, 100);
    }
};

ecoli ( [], program canvas() );

